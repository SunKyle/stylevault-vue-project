{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { analyticsService } from '../services/analyticsService';\nimport { useClothingStore } from './clothingStore';\nimport { useOutfitStore } from './outfitStore';\nexport const useAnalyticsStore = defineStore('analytics', {\n  state: () => ({\n    clothingStats: null,\n    categoryDistribution: [],\n    usageFrequency: [],\n    seasonalAnalysis: [],\n    outfitStats: null,\n    costAnalysis: [],\n    loading: false,\n    error: null,\n    lastUpdated: null\n  }),\n  getters: {\n    totalItems: state => state.clothingStats?.total || 0,\n    totalCategories: state => state.categoryDistribution.length,\n    mostUsedCategory: state => {\n      if (!state.categoryDistribution.length) return null;\n      return state.categoryDistribution.reduce((max, current) => current.count > max.count ? current : max);\n    },\n    wardrobeValue: state => state.costAnalysis.reduce((sum, item) => sum + (item.price || 0), 0)\n  },\n  actions: {\n    async fetchClothingStats() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const clothingStore = useClothingStore();\n        const stats = await analyticsService.getClothingStats(clothingStore.clothingItems);\n        this.clothingStats = stats;\n        this.lastUpdated = new Date();\n        return stats;\n      } catch (error) {\n        this.error = error.message;\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchCategoryDistribution() {\n      try {\n        const clothingStore = useClothingStore();\n        const distribution = await analyticsService.getCategoryDistribution(clothingStore.clothingItems);\n        this.categoryDistribution = distribution;\n        return distribution;\n      } catch (error) {\n        console.error('获取分类分布失败:', error);\n      }\n    },\n    async fetchUsageFrequency() {\n      try {\n        const clothingStore = useClothingStore();\n        const frequency = await analyticsService.getUsageFrequency(clothingStore.clothingItems);\n        this.usageFrequency = frequency;\n        return frequency;\n      } catch (error) {\n        console.error('获取使用频率失败:', error);\n      }\n    },\n    async fetchSeasonalAnalysis() {\n      try {\n        const clothingStore = useClothingStore();\n        const seasonal = await analyticsService.getSeasonalAnalysis(clothingStore.clothingItems);\n        this.seasonalAnalysis = seasonal;\n        return seasonal;\n      } catch (error) {\n        console.error('获取季节分析失败:', error);\n      }\n    },\n    async fetchOutfitStats() {\n      try {\n        const outfitStore = useOutfitStore();\n        const stats = await analyticsService.getOutfitStats(outfitStore.outfits);\n        this.outfitStats = stats;\n        return stats;\n      } catch (error) {\n        console.error('获取搭配统计失败:', error);\n      }\n    },\n    async fetchCostAnalysis() {\n      try {\n        const clothingStore = useClothingStore();\n        const cost = await analyticsService.getCostAnalysis(clothingStore.clothingItems);\n        this.costAnalysis = cost;\n        return cost;\n      } catch (error) {\n        console.error('获取成本分析失败:', error);\n      }\n    },\n    async initializeAnalytics() {\n      // 并行加载所有分析数据\n      await Promise.all([this.fetchClothingStats(), this.fetchCategoryDistribution(), this.fetchUsageFrequency(), this.fetchSeasonalAnalysis(), this.fetchOutfitStats(), this.fetchCostAnalysis()]);\n    },\n    refreshAllData() {\n      return this.initializeAnalytics();\n    }\n  }\n});","map":{"version":3,"names":["defineStore","analyticsService","useClothingStore","useOutfitStore","useAnalyticsStore","state","clothingStats","categoryDistribution","usageFrequency","seasonalAnalysis","outfitStats","costAnalysis","loading","error","lastUpdated","getters","totalItems","total","totalCategories","length","mostUsedCategory","reduce","max","current","count","wardrobeValue","sum","item","price","actions","fetchClothingStats","clothingStore","stats","getClothingStats","clothingItems","Date","message","fetchCategoryDistribution","distribution","getCategoryDistribution","console","fetchUsageFrequency","frequency","getUsageFrequency","fetchSeasonalAnalysis","seasonal","getSeasonalAnalysis","fetchOutfitStats","outfitStore","getOutfitStats","outfits","fetchCostAnalysis","cost","getCostAnalysis","initializeAnalytics","Promise","all","refreshAllData"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/stores/analyticsStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { analyticsService } from '../services/analyticsService';\nimport { useClothingStore } from './clothingStore';\nimport { useOutfitStore } from './outfitStore';\n\nexport const useAnalyticsStore = defineStore('analytics', {\n  state: () => ({\n    clothingStats: null,\n    categoryDistribution: [],\n    usageFrequency: [],\n    seasonalAnalysis: [],\n    outfitStats: null,\n    costAnalysis: [],\n    loading: false,\n    error: null,\n    lastUpdated: null,\n  }),\n\n  getters: {\n    totalItems: state => state.clothingStats?.total || 0,\n    totalCategories: state => state.categoryDistribution.length,\n    mostUsedCategory: state => {\n      if (!state.categoryDistribution.length) return null;\n      return state.categoryDistribution.reduce((max, current) =>\n        current.count > max.count ? current : max\n      );\n    },\n    wardrobeValue: state => state.costAnalysis.reduce((sum, item) => sum + (item.price || 0), 0),\n  },\n\n  actions: {\n    async fetchClothingStats() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const clothingStore = useClothingStore();\n        const stats = await analyticsService.getClothingStats(clothingStore.clothingItems);\n        this.clothingStats = stats;\n        this.lastUpdated = new Date();\n        return stats;\n      } catch (error) {\n        this.error = error.message;\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async fetchCategoryDistribution() {\n      try {\n        const clothingStore = useClothingStore();\n        const distribution = await analyticsService.getCategoryDistribution(\n          clothingStore.clothingItems\n        );\n        this.categoryDistribution = distribution;\n        return distribution;\n      } catch (error) {\n        console.error('获取分类分布失败:', error);\n      }\n    },\n\n    async fetchUsageFrequency() {\n      try {\n        const clothingStore = useClothingStore();\n        const frequency = await analyticsService.getUsageFrequency(clothingStore.clothingItems);\n        this.usageFrequency = frequency;\n        return frequency;\n      } catch (error) {\n        console.error('获取使用频率失败:', error);\n      }\n    },\n\n    async fetchSeasonalAnalysis() {\n      try {\n        const clothingStore = useClothingStore();\n        const seasonal = await analyticsService.getSeasonalAnalysis(clothingStore.clothingItems);\n        this.seasonalAnalysis = seasonal;\n        return seasonal;\n      } catch (error) {\n        console.error('获取季节分析失败:', error);\n      }\n    },\n\n    async fetchOutfitStats() {\n      try {\n        const outfitStore = useOutfitStore();\n        const stats = await analyticsService.getOutfitStats(outfitStore.outfits);\n        this.outfitStats = stats;\n        return stats;\n      } catch (error) {\n        console.error('获取搭配统计失败:', error);\n      }\n    },\n\n    async fetchCostAnalysis() {\n      try {\n        const clothingStore = useClothingStore();\n        const cost = await analyticsService.getCostAnalysis(clothingStore.clothingItems);\n        this.costAnalysis = cost;\n        return cost;\n      } catch (error) {\n        console.error('获取成本分析失败:', error);\n      }\n    },\n\n    async initializeAnalytics() {\n      // 并行加载所有分析数据\n      await Promise.all([\n        this.fetchClothingStats(),\n        this.fetchCategoryDistribution(),\n        this.fetchUsageFrequency(),\n        this.fetchSeasonalAnalysis(),\n        this.fetchOutfitStats(),\n        this.fetchCostAnalysis(),\n      ]);\n    },\n\n    refreshAllData() {\n      return this.initializeAnalytics();\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}