{"ast":null,"code":"import BaseService from './baseService';\nclass WeatherService extends BaseService {\n  constructor() {\n    super();\n    this.baseURL = '/api/weather';\n  }\n  async getCurrentWeather(location) {\n    try {\n      // 模拟API调用，实际项目中替换为真实API\n      const response = await this.request({\n        method: 'GET',\n        url: `${this.baseURL}/current`,\n        params: {\n          lat: location.lat,\n          lng: location.lng\n        }\n      });\n      return response.data || this.getMockCurrentWeather();\n    } catch (error) {\n      console.warn('使用模拟天气数据:', error.message);\n      return this.getMockCurrentWeather();\n    }\n  }\n  async getWeatherForecast(location) {\n    try {\n      const response = await this.request({\n        method: 'GET',\n        url: `${this.baseURL}/forecast`,\n        params: {\n          lat: location.lat,\n          lng: location.lng,\n          days: 7\n        }\n      });\n      return response.data || this.getMockForecast();\n    } catch (error) {\n      console.warn('使用模拟天气预报数据:', error.message);\n      return this.getMockForecast();\n    }\n  }\n  async getOutfitRecommendations({\n    weather,\n    clothes\n  }) {\n    try {\n      const response = await this.request({\n        method: 'POST',\n        url: `${this.baseURL}/recommendations`,\n        data: {\n          weather,\n          clothes\n        }\n      });\n      return response.data || this.generateMockRecommendations(weather, clothes);\n    } catch (error) {\n      return this.generateMockRecommendations(weather, clothes);\n    }\n  }\n  getMockCurrentWeather() {\n    return {\n      temperature: 22,\n      condition: '晴朗',\n      humidity: 65,\n      windSpeed: 12,\n      icon: '☀️'\n    };\n  }\n  getMockForecast() {\n    return [{\n      date: '今天',\n      temperature: 22,\n      condition: '晴朗',\n      icon: '☀️'\n    }, {\n      date: '明天',\n      temperature: 24,\n      condition: '多云',\n      icon: '⛅'\n    }, {\n      date: '后天',\n      temperature: 20,\n      condition: '小雨',\n      icon: '🌧️'\n    }, {\n      date: '周四',\n      temperature: 19,\n      condition: '阴天',\n      icon: '☁️'\n    }, {\n      date: '周五',\n      temperature: 23,\n      condition: '晴朗',\n      icon: '☀️'\n    }, {\n      date: '周六',\n      temperature: 25,\n      condition: '晴朗',\n      icon: '☀️'\n    }, {\n      date: '周日',\n      temperature: 21,\n      condition: '多云',\n      icon: '⛅'\n    }];\n  }\n  generateMockRecommendations(weather, clothes) {\n    // 根据天气生成简单的推荐搭配\n    const temp = weather.temperature;\n    const suitableClothes = clothes.filter(item => {\n      if (temp < 10) return item.type === '外套' || item.type === '毛衣';\n      if (temp < 20) return item.type === '外套' || item.type === '长袖';\n      if (temp < 30) return item.type === 'T恤' || item.type === '衬衫';\n      return item.type === 'T恤' || item.type === '短裤';\n    });\n    return [{\n      id: Date.now(),\n      name: `${temp}°C 推荐搭配`,\n      items: suitableClothes.slice(0, 3),\n      weather: weather\n    }];\n  }\n}\nexport const weatherService = new WeatherService();","map":{"version":3,"names":["BaseService","WeatherService","constructor","baseURL","getCurrentWeather","location","response","request","method","url","params","lat","lng","data","getMockCurrentWeather","error","console","warn","message","getWeatherForecast","days","getMockForecast","getOutfitRecommendations","weather","clothes","generateMockRecommendations","temperature","condition","humidity","windSpeed","icon","date","temp","suitableClothes","filter","item","type","id","Date","now","name","items","slice","weatherService"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/services/weatherService.js"],"sourcesContent":["import BaseService from './baseService';\n\nclass WeatherService extends BaseService {\n  constructor() {\n    super();\n    this.baseURL = '/api/weather';\n  }\n\n  async getCurrentWeather(location) {\n    try {\n      // 模拟API调用，实际项目中替换为真实API\n      const response = await this.request({\n        method: 'GET',\n        url: `${this.baseURL}/current`,\n        params: {\n          lat: location.lat,\n          lng: location.lng,\n        },\n      });\n\n      return response.data || this.getMockCurrentWeather();\n    } catch (error) {\n      console.warn('使用模拟天气数据:', error.message);\n      return this.getMockCurrentWeather();\n    }\n  }\n\n  async getWeatherForecast(location) {\n    try {\n      const response = await this.request({\n        method: 'GET',\n        url: `${this.baseURL}/forecast`,\n        params: {\n          lat: location.lat,\n          lng: location.lng,\n          days: 7,\n        },\n      });\n\n      return response.data || this.getMockForecast();\n    } catch (error) {\n      console.warn('使用模拟天气预报数据:', error.message);\n      return this.getMockForecast();\n    }\n  }\n\n  async getOutfitRecommendations({ weather, clothes }) {\n    try {\n      const response = await this.request({\n        method: 'POST',\n        url: `${this.baseURL}/recommendations`,\n        data: {\n          weather,\n          clothes,\n        },\n      });\n\n      return response.data || this.generateMockRecommendations(weather, clothes);\n    } catch (error) {\n      return this.generateMockRecommendations(weather, clothes);\n    }\n  }\n\n  getMockCurrentWeather() {\n    return {\n      temperature: 22,\n      condition: '晴朗',\n      humidity: 65,\n      windSpeed: 12,\n      icon: '☀️',\n    };\n  }\n\n  getMockForecast() {\n    return [\n      { date: '今天', temperature: 22, condition: '晴朗', icon: '☀️' },\n      { date: '明天', temperature: 24, condition: '多云', icon: '⛅' },\n      { date: '后天', temperature: 20, condition: '小雨', icon: '🌧️' },\n      { date: '周四', temperature: 19, condition: '阴天', icon: '☁️' },\n      { date: '周五', temperature: 23, condition: '晴朗', icon: '☀️' },\n      { date: '周六', temperature: 25, condition: '晴朗', icon: '☀️' },\n      { date: '周日', temperature: 21, condition: '多云', icon: '⛅' },\n    ];\n  }\n\n  generateMockRecommendations(weather, clothes) {\n    // 根据天气生成简单的推荐搭配\n    const temp = weather.temperature;\n    const suitableClothes = clothes.filter(item => {\n      if (temp < 10) return item.type === '外套' || item.type === '毛衣';\n      if (temp < 20) return item.type === '外套' || item.type === '长袖';\n      if (temp < 30) return item.type === 'T恤' || item.type === '衬衫';\n      return item.type === 'T恤' || item.type === '短裤';\n    });\n\n    return [\n      {\n        id: Date.now(),\n        name: `${temp}°C 推荐搭配`,\n        items: suitableClothes.slice(0, 3),\n        weather: weather,\n      },\n    ];\n  }\n}\n\nexport const weatherService = new WeatherService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}