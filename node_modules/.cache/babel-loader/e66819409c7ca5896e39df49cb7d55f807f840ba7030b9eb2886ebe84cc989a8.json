{"ast":null,"code":"import { defineStore } from 'pinia';\nexport const useUiStore = defineStore('ui', {\n  state: () => ({\n    loading: false,\n    loadingMessage: '加载中...',\n    error: null,\n    notification: null,\n    sidebarOpen: false,\n    theme: 'light',\n    // 'light' 或 'dark'\n    activeModal: null,\n    modalProps: null,\n    breadcrumbs: [],\n    pageTitle: 'StyleVault'\n  }),\n  getters: {\n    isLoading: state => state.loading,\n    currentTheme: state => state.theme,\n    hasError: state => !!state.error,\n    hasNotification: state => !!state.notification,\n    isSidebarOpen: state => state.sidebarOpen,\n    getActiveModal: state => state.activeModal,\n    getModalProps: state => state.modalProps,\n    getBreadcrumbs: state => state.breadcrumbs,\n    getPageTitle: state => state.pageTitle\n  },\n  actions: {\n    // 设置加载状态\n    setLoading(status, message = '加载中...') {\n      this.loading = status;\n      this.loadingMessage = message;\n    },\n    // 设置错误信息\n    setError(error) {\n      this.error = error;\n    },\n    // 清除错误信息\n    clearError() {\n      this.error = null;\n    },\n    // 显示通知\n    showNotification(message, type = 'info', duration = 3000) {\n      this.notification = {\n        message,\n        type\n      };\n\n      // 设置定时器自动清除通知\n      if (duration > 0) {\n        setTimeout(() => {\n          this.clearNotification();\n        }, duration);\n      }\n    },\n    // 清除通知\n    clearNotification() {\n      this.notification = null;\n    },\n    // 切换侧边栏\n    toggleSidebar() {\n      this.sidebarOpen = !this.sidebarOpen;\n    },\n    // 打开侧边栏\n    openSidebar() {\n      this.sidebarOpen = true;\n    },\n    // 关闭侧边栏\n    closeSidebar() {\n      this.sidebarOpen = false;\n    },\n    // 切换主题\n    toggleTheme() {\n      this.theme = this.theme === 'light' ? 'dark' : 'light';\n      // 应用主题到document元素，以便全局生效\n      document.documentElement.setAttribute('data-theme', this.theme);\n      // 保存主题偏好到本地存储\n      localStorage.setItem('theme', this.theme);\n    },\n    // 设置主题\n    setTheme(theme) {\n      if (['light', 'dark'].includes(theme)) {\n        this.theme = theme;\n        // 应用主题到document元素，以便全局生效\n        document.documentElement.setAttribute('data-theme', this.theme);\n        // 保存主题偏好到本地存储\n        localStorage.setItem('theme', this.theme);\n      }\n    },\n    // 从本地存储初始化主题\n    initializeTheme() {\n      const savedTheme = localStorage.getItem('theme');\n      if (savedTheme && ['light', 'dark'].includes(savedTheme)) {\n        this.setTheme(savedTheme);\n      } else {\n        // 默认使用系统偏好\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        this.setTheme(prefersDark ? 'dark' : 'light');\n      }\n    },\n    // 打开模态框\n    openModal(modalName, props = {}) {\n      this.activeModal = modalName;\n      this.modalProps = props;\n    },\n    // 关闭模态框\n    closeModal() {\n      this.activeModal = null;\n      this.modalProps = null;\n    },\n    // 设置面包屑\n    setBreadcrumbs(breadcrumbs) {\n      this.breadcrumbs = breadcrumbs;\n    },\n    // 添加面包屑\n    addBreadcrumb(crumb) {\n      this.breadcrumbs.push(crumb);\n    },\n    // 清除面包屑\n    clearBreadcrumbs() {\n      this.breadcrumbs = [];\n    },\n    // 设置页面标题\n    setPageTitle(title) {\n      this.pageTitle = title;\n      // 同时更新document的title\n      document.title = `${title} - StyleVault`;\n    },\n    // 初始化UI状态\n    initializeUi() {\n      // 初始化主题\n      this.initializeTheme();\n\n      // 监听系统主题变化\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const handleChange = e => {\n        // 只有当用户没有手动设置主题时才跟随系统\n        if (!localStorage.getItem('theme')) {\n          this.setTheme(e.matches ? 'dark' : 'light');\n        }\n      };\n\n      // 添加监听器\n      if (mediaQuery.addEventListener) {\n        mediaQuery.addEventListener('change', handleChange);\n      } else {\n        // 兼容旧浏览器\n        mediaQuery.addListener(handleChange);\n      }\n\n      // 页面加载时显示欢迎消息\n      this.showNotification('欢迎使用 StyleVault！', 'success', 3000);\n    },\n    // 显示错误提示\n    showErrorToast(message) {\n      this.showNotification(message, 'error', 5000);\n    },\n    // 显示成功提示\n    showSuccessToast(message) {\n      this.showNotification(message, 'success', 3000);\n    },\n    // 显示警告提示\n    showWarningToast(message) {\n      this.showNotification(message, 'warning', 4000);\n    },\n    // 显示信息提示\n    showInfoToast(message) {\n      this.showNotification(message, 'info', 3000);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useUiStore","state","loading","loadingMessage","error","notification","sidebarOpen","theme","activeModal","modalProps","breadcrumbs","pageTitle","getters","isLoading","currentTheme","hasError","hasNotification","isSidebarOpen","getActiveModal","getModalProps","getBreadcrumbs","getPageTitle","actions","setLoading","status","message","setError","clearError","showNotification","type","duration","setTimeout","clearNotification","toggleSidebar","openSidebar","closeSidebar","toggleTheme","document","documentElement","setAttribute","localStorage","setItem","setTheme","includes","initializeTheme","savedTheme","getItem","prefersDark","window","matchMedia","matches","openModal","modalName","props","closeModal","setBreadcrumbs","addBreadcrumb","crumb","push","clearBreadcrumbs","setPageTitle","title","initializeUi","mediaQuery","handleChange","e","addEventListener","addListener","showErrorToast","showSuccessToast","showWarningToast","showInfoToast"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/stores/uiStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\n\nexport const useUiStore = defineStore('ui', {\n  state: () => ({\n    loading: false,\n    loadingMessage: '加载中...',\n    error: null,\n    notification: null,\n    sidebarOpen: false,\n    theme: 'light', // 'light' 或 'dark'\n    activeModal: null,\n    modalProps: null,\n    breadcrumbs: [],\n    pageTitle: 'StyleVault',\n  }),\n\n  getters: {\n    isLoading: state => state.loading,\n    currentTheme: state => state.theme,\n    hasError: state => !!state.error,\n    hasNotification: state => !!state.notification,\n    isSidebarOpen: state => state.sidebarOpen,\n    getActiveModal: state => state.activeModal,\n    getModalProps: state => state.modalProps,\n    getBreadcrumbs: state => state.breadcrumbs,\n    getPageTitle: state => state.pageTitle,\n  },\n\n  actions: {\n    // 设置加载状态\n    setLoading(status, message = '加载中...') {\n      this.loading = status;\n      this.loadingMessage = message;\n    },\n\n    // 设置错误信息\n    setError(error) {\n      this.error = error;\n    },\n\n    // 清除错误信息\n    clearError() {\n      this.error = null;\n    },\n\n    // 显示通知\n    showNotification(message, type = 'info', duration = 3000) {\n      this.notification = { message, type };\n\n      // 设置定时器自动清除通知\n      if (duration > 0) {\n        setTimeout(() => {\n          this.clearNotification();\n        }, duration);\n      }\n    },\n\n    // 清除通知\n    clearNotification() {\n      this.notification = null;\n    },\n\n    // 切换侧边栏\n    toggleSidebar() {\n      this.sidebarOpen = !this.sidebarOpen;\n    },\n\n    // 打开侧边栏\n    openSidebar() {\n      this.sidebarOpen = true;\n    },\n\n    // 关闭侧边栏\n    closeSidebar() {\n      this.sidebarOpen = false;\n    },\n\n    // 切换主题\n    toggleTheme() {\n      this.theme = this.theme === 'light' ? 'dark' : 'light';\n      // 应用主题到document元素，以便全局生效\n      document.documentElement.setAttribute('data-theme', this.theme);\n      // 保存主题偏好到本地存储\n      localStorage.setItem('theme', this.theme);\n    },\n\n    // 设置主题\n    setTheme(theme) {\n      if (['light', 'dark'].includes(theme)) {\n        this.theme = theme;\n        // 应用主题到document元素，以便全局生效\n        document.documentElement.setAttribute('data-theme', this.theme);\n        // 保存主题偏好到本地存储\n        localStorage.setItem('theme', this.theme);\n      }\n    },\n\n    // 从本地存储初始化主题\n    initializeTheme() {\n      const savedTheme = localStorage.getItem('theme');\n      if (savedTheme && ['light', 'dark'].includes(savedTheme)) {\n        this.setTheme(savedTheme);\n      } else {\n        // 默认使用系统偏好\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        this.setTheme(prefersDark ? 'dark' : 'light');\n      }\n    },\n\n    // 打开模态框\n    openModal(modalName, props = {}) {\n      this.activeModal = modalName;\n      this.modalProps = props;\n    },\n\n    // 关闭模态框\n    closeModal() {\n      this.activeModal = null;\n      this.modalProps = null;\n    },\n\n    // 设置面包屑\n    setBreadcrumbs(breadcrumbs) {\n      this.breadcrumbs = breadcrumbs;\n    },\n\n    // 添加面包屑\n    addBreadcrumb(crumb) {\n      this.breadcrumbs.push(crumb);\n    },\n\n    // 清除面包屑\n    clearBreadcrumbs() {\n      this.breadcrumbs = [];\n    },\n\n    // 设置页面标题\n    setPageTitle(title) {\n      this.pageTitle = title;\n      // 同时更新document的title\n      document.title = `${title} - StyleVault`;\n    },\n\n    // 初始化UI状态\n    initializeUi() {\n      // 初始化主题\n      this.initializeTheme();\n\n      // 监听系统主题变化\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const handleChange = e => {\n        // 只有当用户没有手动设置主题时才跟随系统\n        if (!localStorage.getItem('theme')) {\n          this.setTheme(e.matches ? 'dark' : 'light');\n        }\n      };\n\n      // 添加监听器\n      if (mediaQuery.addEventListener) {\n        mediaQuery.addEventListener('change', handleChange);\n      } else {\n        // 兼容旧浏览器\n        mediaQuery.addListener(handleChange);\n      }\n\n      // 页面加载时显示欢迎消息\n      this.showNotification('欢迎使用 StyleVault！', 'success', 3000);\n    },\n\n    // 显示错误提示\n    showErrorToast(message) {\n      this.showNotification(message, 'error', 5000);\n    },\n\n    // 显示成功提示\n    showSuccessToast(message) {\n      this.showNotification(message, 'success', 3000);\n    },\n\n    // 显示警告提示\n    showWarningToast(message) {\n      this.showNotification(message, 'warning', 4000);\n    },\n\n    // 显示信息提示\n    showInfoToast(message) {\n      this.showNotification(message, 'info', 3000);\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}