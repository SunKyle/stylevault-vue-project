{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"py-10\"\n};\nvar _hoisted_2 = {\n  \"class\": \"container mx-auto px-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 已保存搭配展示区域 \"), _createVNode($setup[\"SavedOutfits\"], {\n    savedOutfits: $setup.savedOutfits,\n    currentPage: $setup.currentPage,\n    itemsPerPage: $setup.itemsPerPage,\n    totalPages: $setup.totalPages,\n    currentPageOutfits: $setup.currentPageOutfits,\n    onLoadOutfit: $setup.loadOutfit,\n    onDeleteOutfit: $setup.deleteOutfit,\n    onShareOutfit: $setup.shareOutfit,\n    onPageChange: _cache[0] || (_cache[0] = function ($event) {\n      return $setup.currentPage = $event;\n    }),\n    onScrollToCreate: $setup.scrollToCreateSection\n  }, null, 8 /* PROPS */, [\"savedOutfits\", \"currentPage\", \"itemsPerPage\", \"totalPages\", \"currentPageOutfits\"]), _createCommentVNode(\" 创建搭配区域 \"), _createVNode($setup[\"OutfitCreator\"], {\n    selectedClothes: $setup.selectedClothes,\n    clothes: $setup.clothes,\n    categories: $setup.categories,\n    tags: $setup.tags,\n    activeCategory: $setup.activeCategory,\n    activeTag: $setup.activeTag,\n    filteredClothes: $setup.filteredClothes,\n    onToggleCloth: $setup.toggleCloth,\n    onRemoveCloth: $setup.removeCloth,\n    onResetClothes: $setup.resetClothes,\n    onSaveOutfit: $setup.saveOutfit,\n    onCategoryChange: _cache[1] || (_cache[1] = function ($event) {\n      return $setup.activeCategory = $event;\n    }),\n    onTagChange: _cache[2] || (_cache[2] = function ($event) {\n      return $setup.activeTag = $event;\n    }),\n    onResetFilters: _cache[3] || (_cache[3] = function ($event) {\n      $setup.activeCategory = '全部';\n      $setup.activeTag = '';\n    })\n  }, null, 8 /* PROPS */, [\"selectedClothes\", \"clothes\", \"categories\", \"tags\", \"activeCategory\", \"activeTag\", \"filteredClothes\"])])]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_createVNode","$setup","savedOutfits","currentPage","itemsPerPage","totalPages","currentPageOutfits","onLoadOutfit","loadOutfit","onDeleteOutfit","deleteOutfit","onShareOutfit","shareOutfit","onPageChange","_cache","$event","onScrollToCreate","scrollToCreateSection","selectedClothes","clothes","categories","tags","activeCategory","activeTag","filteredClothes","onToggleCloth","toggleCloth","onRemoveCloth","removeCloth","onResetClothes","resetClothes","onSaveOutfit","saveOutfit","onCategoryChange","onTagChange","onResetFilters"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/components/inspiration/InspirationSection.vue"],"sourcesContent":["<template>\n  <section class=\"py-10\">\n    <div class=\"container mx-auto px-4\">\n      <!-- 已保存搭配展示区域 -->\n      <SavedOutfits \n        :savedOutfits=\"savedOutfits\"\n        :currentPage=\"currentPage\"\n        :itemsPerPage=\"itemsPerPage\"\n        :totalPages=\"totalPages\"\n        :currentPageOutfits=\"currentPageOutfits\"\n        @load-outfit=\"loadOutfit\"\n        @delete-outfit=\"deleteOutfit\"\n        @share-outfit=\"shareOutfit\"\n        @page-change=\"currentPage = $event\"\n        @scroll-to-create=\"scrollToCreateSection\"\n      />\n\n      <!-- 创建搭配区域 -->\n      <OutfitCreator\n        :selectedClothes=\"selectedClothes\"\n        :clothes=\"clothes\"\n        :categories=\"categories\"\n        :tags=\"tags\"\n        :activeCategory=\"activeCategory\"\n        :activeTag=\"activeTag\"\n        :filteredClothes=\"filteredClothes\"\n        @toggle-cloth=\"toggleCloth\"\n        @remove-cloth=\"removeCloth\"\n        @reset-clothes=\"resetClothes\"\n        @save-outfit=\"saveOutfit\"\n        @category-change=\"activeCategory = $event\"\n        @tag-change=\"activeTag = $event\"\n        @reset-filters=\"activeCategory = '全部'; activeTag = ''\"\n      />\n    </div>\n  </section>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\nimport { useWardrobeStore } from '../../stores/wardrobeStore'\nimport { scenesMockData, getClothesWithTags } from '../../mock/wardrobe'\nimport SavedOutfits from './SavedOutfits.vue'\nimport OutfitCreator from './OutfitCreator.vue'\n\nconst wardrobeStore = useWardrobeStore()\nconst categories = computed(() => ['全部', ...wardrobeStore.categories.map(c => c.name)])\n\n// 分页相关数据\nconst currentPage = ref(1)\nconst itemsPerPage = ref(4) // 每页显示的卡片数量\nconst isLoading = ref(true) // 数据加载状态\n\n// 从wardrobeStore获取转换后的数据\nconst clothes = ref([])\n\n// 监听clothingItems变化，自动转换数据\nwatch(\n  () => wardrobeStore.clothingItems,\n  (newItems) => {\n    if (newItems.length > 0) {\n      clothes.value = getClothesWithTags(newItems)\n    }\n  },\n  { immediate: true }\n)\n\n// 获取所有唯一的标签\nconst allTags = computed(() => {\n  const tagSet = new Set()\n  if (Array.isArray(clothes.value)) {\n    clothes.value.forEach(item => {\n      if (item.tags && Array.isArray(item.tags)) {\n        item.tags.forEach(tag => tagSet.add(tag))\n      }\n    })\n  }\n  return Array.from(tagSet)\n})\n\n// 添加\"最近穿着\"标签\nconst tags = computed(() => {\n  return ['最近穿着', ...allTags.value]\n})\nconst activeCategory = ref('全部')\nconst activeTag = ref('')\nconst selectedClothes = ref([])\nconst savedOutfits = ref([])\n\n// 计算当前页要显示的搭配\nconst currentPageOutfits = computed(() => {\n  const start = (currentPage.value - 1) * itemsPerPage.value\n  const end = start + itemsPerPage.value\n  // 过滤掉无效的搭配对象\n  return savedOutfits.value.slice(start, end).filter(outfit => outfit && outfit.id && outfit.name)\n})\n\n// 计算总页数\nconst totalPages = computed(() => {\n  return Math.ceil(savedOutfits.value.length / itemsPerPage.value)\n})\n\n// 组件挂载时加载已保存的搭配\nonMounted(() => {\n  // 先加载搭配数据，这是分页所需的唯一数据\n  loadSavedOutfits()\n  // 搭配数据加载完成后立即启用分页\n  isLoading.value = false\n  \n  // 异步加载其他数据，不阻塞分页功能\n  Promise.all([\n    wardrobeStore.categories.length === 0 ? wardrobeStore.fetchCategories() : Promise.resolve(),\n    wardrobeStore.clothingItems.length === 0 ? wardrobeStore.fetchClothingItems() : Promise.resolve()\n  ]).catch(error => {\n    console.error('加载衣物数据失败:', error)\n  })\n})\n\nconst filteredClothes = computed(() => {\n  return clothes.value.filter(item => {\n    const catMatch = activeCategory.value === '全部' || item.category === activeCategory.value\n    const tagMatch = !activeTag.value || item.tags.includes(activeTag.value)\n    return catMatch && tagMatch\n  })\n})\n\nfunction addCloth(item) {\n  if (!selectedClothes.value.find(i => i.name === item.name)) {\n    selectedClothes.value.push(item)\n  }\n}\n\nfunction removeCloth(idx) {\n  selectedClothes.value.splice(idx, 1)\n}\n\nfunction resetClothes() {\n  selectedClothes.value = []\n}\n\nfunction toggleCloth(item) {\n  const index = selectedClothes.value.findIndex(i => i.name === item.name)\n  if (index === -1) {\n    // 如果未选中，则添加\n    selectedClothes.value.push(item)\n  } else {\n    // 如果已选中，则移除\n    selectedClothes.value.splice(index, 1)\n  }\n}\n\n// 滚动到创建搭配区域\nfunction scrollToCreateSection() {\n  const element = document.getElementById('create-section')\n  if (element) {\n    element.scrollIntoView({ behavior: 'smooth' })\n  }\n}\n\n// 加载已保存的搭配\nasync function loadSavedOutfits() {\n  try {\n    isLoading.value = true\n    const outfits = await outfitService.getOutfits()\n    savedOutfits.value = outfits\n  } catch (error) {\n    console.error('加载搭配失败:', error)\n    showToast('加载搭配失败', 'error')\n    // 如果API调用失败，回退到localStorage\n    const outfits = JSON.parse(localStorage.getItem('savedOutfits') || '[]')\n    savedOutfits.value = outfits\n  } finally {\n    isLoading.value = false\n  }\n}\n\n// 保存穿搭方案\nasync function saveOutfit(outfitInfo) {\n  if (selectedClothes.value.length === 0) {\n    showToast('请至少选择一件衣物', 'warning')\n    return\n  }\n\n  // 使用从组件传递的搭配信息\n  const outfitName = outfitInfo.name\n  const outfitScene = outfitInfo.scene\n\n  // 创建一个新的穿搭方案\n  const newOutfit = {\n    name: outfitName,\n    scene: outfitScene || undefined,\n    items: [...selectedClothes.value],\n    createdAt: new Date().toISOString()\n  }\n\n  try {\n    // 使用outfitService保存搭配\n    const savedOutfit = await outfitService.addOutfit(newOutfit)\n    \n    // 更新已保存搭配列表\n    await loadSavedOutfits()\n    \n    // 显示成功消息\n    showToast('穿搭方案已保存！', 'success')\n    \n    // 重置当前搭配\n    resetClothes()\n  } catch (error) {\n    console.error('保存搭配失败:', error)\n    showToast('保存搭配失败，请重试', 'error')\n    \n    // 如果API调用失败，回退到localStorage\n    try {\n      const outfits = JSON.parse(localStorage.getItem('savedOutfits') || '[]')\n      newOutfit.id = Date.now() // 使用时间戳作为ID\n      outfits.push(newOutfit)\n      localStorage.setItem('savedOutfits', JSON.stringify(outfits))\n      \n      // 更新已保存搭配列表\n      await loadSavedOutfits()\n      \n      // 显示成功消息\n      showToast('穿搭方案已保存到本地！', 'success')\n      \n      // 重置当前搭配\n      resetClothes()\n    } catch (localError) {\n      console.error('本地保存搭配失败:', localError)\n      showToast('保存搭配失败', 'error')\n    }\n  }\n}\n\n// 加载搭配方案\nfunction loadOutfit(outfit) {\n  selectedClothes.value = Array.isArray(outfit.items) ? [...outfit.items] : []\n  // 滚动到搭配预览区域\n  nextTick(() => {\n    const element = document.getElementById('create-section')\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' })\n    }\n  })\n}\n\n// 删除搭配方案\nfunction deleteOutfit(index) {\n  if (confirm('确定要删除这个搭配方案吗？')) {\n    const outfits = JSON.parse(localStorage.getItem('savedOutfits') || '[]')\n    outfits.splice(index, 1)\n    localStorage.setItem('savedOutfits', JSON.stringify(outfits))\n\n    // 更新已保存搭配列表\n    loadSavedOutfits()\n  }\n}\n\n// 格式化日期\nfunction formatDate(date) {\n  const d = new Date(date)\n  return `${d.getFullYear()}/${(d.getMonth() + 1).toString().padStart(2, '0')}/${d.getDate().toString().padStart(2, '0')}`\n}\n\n// 获取搭配衣物类型统计\nfunction getOutfitStats(items) {\n  const stats = {}\n  items.forEach(item => {\n    // 提取类型（如\"上衣\"、\"裤子\"等）\n    const type = item.type.split(' · ')[0]\n    if (stats[type]) {\n      stats[type]++\n    } else {\n      stats[type] = 1\n    }\n  })\n  return stats\n}\n\n// 获取搭配标签\nfunction getOutfitTags(items) {\n  const tags = new Set()\n  items.forEach(item => {\n    if (item.tags && Array.isArray(item.tags)) {\n      item.tags.forEach(tag => tags.add(tag))\n    }\n  })\n  return Array.from(tags)\n}\n\n// 获取搭配评分（模拟）\nfunction getOutfitRating(outfit) {\n  // 基于衣物数量和搭配多样性计算评分\n  if (!outfit.items || outfit.items.length === 0) return 0\n\n  // 基础分 5 分\n  let baseScore = 5\n\n  // 衣物数量加分 (最多 3 分)\n  const quantityBonus = Math.min(Math.floor(outfit.items.length / 2), 3)\n\n  // 搭配多样性加分 (最多 2 分)\n  const types = new Set(outfit.items.map(item => item.type.split(' · ')[0]))\n  const diversityBonus = Math.min(types.size - 1, 2)\n\n  return baseScore + quantityBonus + diversityBonus\n}\n\n// 获取随机点赞数（模拟）\nfunction getRandomLikes() {\n  return Math.floor(Math.random() * 100) + 1\n}\n\n// 获取随机评论数（模拟）\nfunction getRandomComments() {\n  return Math.floor(Math.random() * 20) + 1\n}\n\n// 分享搭配方案\nfunction shareOutfit(outfit) {\n  showToast('分享功能已触发：' + outfit.name, 'info')\n  // 实际实现时可以调用系统分享API或生成分享链接\n}\n\n// 编辑搭配方案\nfunction editOutfit({ index, outfit }) {\n  // 更新本地存储中的搭配信息\n  const outfits = JSON.parse(localStorage.getItem('savedOutfits') || '[]')\n  if (index >= 0 && index < outfits.length) {\n    outfits[index] = outfit\n    localStorage.setItem('savedOutfits', JSON.stringify(outfits))\n    \n    // 更新已保存搭配列表\n    loadSavedOutfits()\n    \n    // 显示成功消息\n    alert('搭配方案已更新！')\n  }\n}\n</script>\n\n<style scoped>\n/* 自定义滚动条样式 */\n.scrollbar-thin::-webkit-scrollbar {\n  width: 4px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 2px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n/* 悬停动画增强 */\n.group:hover .text-primary {\n  color: theme('colors.primary', #3b82f6);\n}\n\n/* 卡片悬停效果增强 */\n.shadow-md {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);\n}\n\n.shadow-lg {\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.04);\n}\n</style>\n"],"mappings":";;EACW,SAAM;AAAO;;EACf,SAAM;AAAwB;;uBADrCA,mBAAA,CAkCU,WAlCVC,UAkCU,GAjCRC,mBAAA,CAgCM,OAhCNC,UAgCM,GA/BJC,mBAAA,eAAkB,EAClBC,YAAA,CAWEC,MAAA;IAVCC,YAAY,EAAED,MAAA,CAAAC,YAAY;IAC1BC,WAAW,EAAEF,MAAA,CAAAE,WAAW;IACxBC,YAAY,EAAEH,MAAA,CAAAG,YAAY;IAC1BC,UAAU,EAAEJ,MAAA,CAAAI,UAAU;IACtBC,kBAAkB,EAAEL,MAAA,CAAAK,kBAAkB;IACtCC,YAAW,EAAEN,MAAA,CAAAO,UAAU;IACvBC,cAAa,EAAER,MAAA,CAAAS,YAAY;IAC3BC,aAAY,EAAEV,MAAA,CAAAW,WAAW;IACzBC,YAAW,EAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEd,MAAA,CAAAE,WAAW,GAAGY,MAAM;IAAA;IACjCC,gBAAgB,EAAEf,MAAA,CAAAgB;gHAGrBlB,mBAAA,YAAe,EACfC,YAAA,CAeEC,MAAA;IAdCiB,eAAe,EAAEjB,MAAA,CAAAiB,eAAe;IAChCC,OAAO,EAAElB,MAAA,CAAAkB,OAAO;IAChBC,UAAU,EAAEnB,MAAA,CAAAmB,UAAU;IACtBC,IAAI,EAAEpB,MAAA,CAAAoB,IAAI;IACVC,cAAc,EAAErB,MAAA,CAAAqB,cAAc;IAC9BC,SAAS,EAAEtB,MAAA,CAAAsB,SAAS;IACpBC,eAAe,EAAEvB,MAAA,CAAAuB,eAAe;IAChCC,aAAY,EAAExB,MAAA,CAAAyB,WAAW;IACzBC,aAAY,EAAE1B,MAAA,CAAA2B,WAAW;IACzBC,cAAa,EAAE5B,MAAA,CAAA6B,YAAY;IAC3BC,YAAW,EAAE9B,MAAA,CAAA+B,UAAU;IACvBC,gBAAe,EAAAnB,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEd,MAAA,CAAAqB,cAAc,GAAGP,MAAM;IAAA;IACxCmB,WAAU,EAAApB,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAAEd,MAAA,CAAAsB,SAAS,GAAGR,MAAM;IAAA;IAC9BoB,cAAa,EAAArB,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAEd,MAAA,CAAAqB,cAAc;MAASrB,MAAA,CAAAsB,SAAS;IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}