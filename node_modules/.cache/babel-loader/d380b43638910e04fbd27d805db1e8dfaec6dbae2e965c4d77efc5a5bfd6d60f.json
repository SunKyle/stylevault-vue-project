{"ast":null,"code":"// 用户数据\nexport const users = [{\n  id: 1,\n  username: 'stylefan',\n  email: 'user@example.com',\n  nickname: '时尚达人',\n  avatar: 'https://picsum.photos/seed/user1/200/200',\n  bio: '热爱时尚，喜欢尝试不同风格的穿搭',\n  preferences: {\n    favoriteStyles: ['休闲', '商务'],\n    favoriteColors: ['#000000', '#4A5568', '#FFFFFF'],\n    preferredSeasons: ['春季', '秋季']\n  },\n  stats: {\n    totalItems: 30,\n    totalOutfits: 12,\n    favoriteItems: 20,\n    itemsWornThisMonth: 15\n  },\n  createdAt: '2023-01-15',\n  lastLogin: '2023-08-21'\n}];\n\n// 模拟API延迟\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// 模拟用户API服务\nexport const userAPI = {\n  // 用户登录\n  login: async credentials => {\n    await delay(500); // 模拟网络延迟\n    const {\n      username,\n      password\n    } = credentials;\n\n    // 简单的验证逻辑\n    if (username === 'stylefan' && password === 'password') {\n      const user = users[0];\n      // 生成模拟token\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n      return {\n        success: true,\n        data: {\n          user,\n          token\n        }\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户名或密码错误'\n      };\n    }\n  },\n  // 用户注册\n  register: async userData => {\n    await delay(800); // 模拟网络延迟\n    const {\n      username,\n      email,\n      password\n    } = userData;\n\n    // 检查用户名是否已存在\n    if (users.some(user => user.username === username)) {\n      return {\n        success: false,\n        message: '用户名已存在'\n      };\n    }\n\n    // 检查邮箱是否已存在\n    if (users.some(user => user.email === email)) {\n      return {\n        success: false,\n        message: '邮箱已被注册'\n      };\n    }\n\n    // 创建新用户\n    const newUser = {\n      id: users.length + 1,\n      username,\n      email,\n      nickname: userData.nickname || username,\n      avatar: 'https://picsum.photos/seed/user' + (users.length + 1) + '/200/200',\n      bio: userData.bio || '',\n      preferences: {\n        favoriteStyles: [],\n        favoriteColors: [],\n        preferredSeasons: []\n      },\n      stats: {\n        totalItems: 0,\n        totalOutfits: 0,\n        favoriteItems: 0,\n        itemsWornThisMonth: 0\n      },\n      createdAt: new Date().toISOString().split('T')[0],\n      lastLogin: new Date().toISOString().split('T')[0]\n    };\n    users.push(newUser);\n\n    // 生成模拟token\n    const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n    return {\n      success: true,\n      data: {\n        user: newUser,\n        token\n      }\n    };\n  },\n  // 获取用户信息\n  getUserProfile: async userId => {\n    await delay(300); // 模拟网络延迟\n    const user = users.find(u => u.id === userId);\n    if (user) {\n      return {\n        success: true,\n        data: user\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户不存在'\n      };\n    }\n  },\n  // 更新用户信息\n  updateUserProfile: async (userId, updates) => {\n    await delay(400); // 模拟网络延迟\n    const index = users.findIndex(u => u.id === userId);\n    if (index !== -1) {\n      users[index] = {\n        ...users[index],\n        ...updates\n      };\n      return {\n        success: true,\n        data: users[index]\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户不存在'\n      };\n    }\n  },\n  // 更新用户偏好设置\n  updateUserPreferences: async (userId, preferences) => {\n    await delay(400); // 模拟网络延迟\n    const index = users.findIndex(u => u.id === userId);\n    if (index !== -1) {\n      users[index].preferences = {\n        ...users[index].preferences,\n        ...preferences\n      };\n      return {\n        success: true,\n        data: users[index].preferences\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户不存在'\n      };\n    }\n  }\n};","map":{"version":3,"names":["users","id","username","email","nickname","avatar","bio","preferences","favoriteStyles","favoriteColors","preferredSeasons","stats","totalItems","totalOutfits","favoriteItems","itemsWornThisMonth","createdAt","lastLogin","delay","ms","Promise","resolve","setTimeout","userAPI","login","credentials","password","user","token","Math","random","toString","substring","success","data","message","register","userData","some","newUser","length","Date","toISOString","split","push","getUserProfile","userId","find","u","updateUserProfile","updates","index","findIndex","updateUserPreferences"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/mock/user.js"],"sourcesContent":["// 用户数据\nexport const users = [\n  {\n    id: 1,\n    username: 'stylefan',\n    email: 'user@example.com',\n    nickname: '时尚达人',\n    avatar: 'https://picsum.photos/seed/user1/200/200',\n    bio: '热爱时尚，喜欢尝试不同风格的穿搭',\n    preferences: {\n      favoriteStyles: ['休闲', '商务'],\n      favoriteColors: ['#000000', '#4A5568', '#FFFFFF'],\n      preferredSeasons: ['春季', '秋季'],\n    },\n    stats: {\n      totalItems: 30,\n      totalOutfits: 12,\n      favoriteItems: 20,\n      itemsWornThisMonth: 15,\n    },\n    createdAt: '2023-01-15',\n    lastLogin: '2023-08-21',\n  },\n];\n\n// 模拟API延迟\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// 模拟用户API服务\nexport const userAPI = {\n  // 用户登录\n  login: async credentials => {\n    await delay(500); // 模拟网络延迟\n    const { username, password } = credentials;\n\n    // 简单的验证逻辑\n    if (username === 'stylefan' && password === 'password') {\n      const user = users[0];\n      // 生成模拟token\n      const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n\n      return {\n        success: true,\n        data: {\n          user,\n          token,\n        },\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户名或密码错误',\n      };\n    }\n  },\n\n  // 用户注册\n  register: async userData => {\n    await delay(800); // 模拟网络延迟\n    const { username, email, password } = userData;\n\n    // 检查用户名是否已存在\n    if (users.some(user => user.username === username)) {\n      return {\n        success: false,\n        message: '用户名已存在',\n      };\n    }\n\n    // 检查邮箱是否已存在\n    if (users.some(user => user.email === email)) {\n      return {\n        success: false,\n        message: '邮箱已被注册',\n      };\n    }\n\n    // 创建新用户\n    const newUser = {\n      id: users.length + 1,\n      username,\n      email,\n      nickname: userData.nickname || username,\n      avatar: 'https://picsum.photos/seed/user' + (users.length + 1) + '/200/200',\n      bio: userData.bio || '',\n      preferences: {\n        favoriteStyles: [],\n        favoriteColors: [],\n        preferredSeasons: [],\n      },\n      stats: {\n        totalItems: 0,\n        totalOutfits: 0,\n        favoriteItems: 0,\n        itemsWornThisMonth: 0,\n      },\n      createdAt: new Date().toISOString().split('T')[0],\n      lastLogin: new Date().toISOString().split('T')[0],\n    };\n\n    users.push(newUser);\n\n    // 生成模拟token\n    const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n\n    return {\n      success: true,\n      data: {\n        user: newUser,\n        token,\n      },\n    };\n  },\n\n  // 获取用户信息\n  getUserProfile: async userId => {\n    await delay(300); // 模拟网络延迟\n    const user = users.find(u => u.id === userId);\n\n    if (user) {\n      return {\n        success: true,\n        data: user,\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户不存在',\n      };\n    }\n  },\n\n  // 更新用户信息\n  updateUserProfile: async (userId, updates) => {\n    await delay(400); // 模拟网络延迟\n    const index = users.findIndex(u => u.id === userId);\n\n    if (index !== -1) {\n      users[index] = { ...users[index], ...updates };\n      return {\n        success: true,\n        data: users[index],\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户不存在',\n      };\n    }\n  },\n\n  // 更新用户偏好设置\n  updateUserPreferences: async (userId, preferences) => {\n    await delay(400); // 模拟网络延迟\n    const index = users.findIndex(u => u.id === userId);\n\n    if (index !== -1) {\n      users[index].preferences = { ...users[index].preferences, ...preferences };\n      return {\n        success: true,\n        data: users[index].preferences,\n      };\n    } else {\n      return {\n        success: false,\n        message: '用户不存在',\n      };\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}