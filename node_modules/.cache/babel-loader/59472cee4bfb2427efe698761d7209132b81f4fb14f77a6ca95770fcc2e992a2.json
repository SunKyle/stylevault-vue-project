{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { clothingAdapter } from '../adapters/clothingAdapter';\n\n// 缓存工具\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\nconst isCacheValid = key => {\n  const cached = cache.get(key);\n  if (!cached) return false;\n  return Date.now() - cached.timestamp < CACHE_DURATION;\n};\nconst getCachedData = key => {\n  const cached = cache.get(key);\n  return cached && isCacheValid(key) ? cached.data : null;\n};\nconst setCachedData = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now()\n  });\n};\n\n// 防抖工具\nconst debounce = (func, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    return new Promise(resolve => {\n      timeoutId = setTimeout(() => resolve(func.apply(this, args)), delay);\n    });\n  };\n};\nexport const useClothingStore = defineStore('clothing', {\n  state: () => ({\n    categories: [],\n    clothingItems: [],\n    selectedCategory: null,\n    loading: false,\n    error: null,\n    // 性能优化相关\n    searchResults: [],\n    isSearching: false,\n    lastFetchTime: null,\n    // 批量操作队列\n    pendingUpdates: new Map(),\n    // 分页相关\n    pagination: {\n      currentPage: 1,\n      itemsPerPage: 50,\n      totalItems: 0\n    }\n  }),\n  getters: {\n    // 获取选中的衣物\n    selectedItems: state => {\n      if (state.selectedCategory) {\n        return state.clothingItems.filter(item => item.categoryId === state.selectedCategory);\n      }\n      return state.clothingItems;\n    },\n    // 获取收藏的衣物\n    favoriteItems: state => {\n      return state.clothingItems.filter(item => item.favorite);\n    },\n    // 按类别分组衣物\n    itemsByCategory: state => {\n      const result = {};\n      state.categories.forEach(category => {\n        result[category.id] = state.clothingItems.filter(item => item.categoryId === category.id);\n      });\n      return result;\n    },\n    // 获取最常穿的衣物\n    mostWornItems: state => {\n      return [...state.clothingItems].sort((a, b) => b.wearCount - a.wearCount).slice(0, 5);\n    },\n    // 获取最近添加的衣物\n    recentlyAddedItems: state => {\n      return [...state.clothingItems].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate)).slice(0, 5);\n    },\n    // 新增性能相关 getters\n    paginatedItems: state => {\n      const startIndex = (state.pagination.currentPage - 1) * state.pagination.itemsPerPage;\n      const endIndex = startIndex + state.pagination.itemsPerPage;\n      return state.clothingItems.slice(startIndex, endIndex);\n    },\n    totalPages: state => Math.ceil(state.clothingItems.length / state.pagination.itemsPerPage),\n    // 获取统计数据\n    stats: state => ({\n      total: state.clothingItems.length,\n      categories: [...new Set(state.clothingItems.map(item => item.categoryId))].length,\n      totalValue: state.clothingItems.reduce((sum, item) => sum + (item.price || 0), 0),\n      averagePrice: state.clothingItems.length ? state.clothingItems.reduce((sum, item) => sum + (item.price || 0), 0) / state.clothingItems.length : 0\n    })\n  },\n  actions: {\n    // 设置加载状态\n    setLoading(status) {\n      this.loading = status;\n    },\n    setError(error) {\n      this.error = error;\n    },\n    clearError() {\n      this.error = null;\n    },\n    // 设置分页\n    setPagination(pagination) {\n      this.pagination = {\n        ...this.pagination,\n        ...pagination\n      };\n    },\n    // 设置选中的分类\n    setSelectedCategory(categoryId) {\n      this.selectedCategory = categoryId;\n    },\n    // 清除选中的分类\n    clearSelectedCategory() {\n      this.selectedCategory = null;\n    },\n    // 智能获取数据（带缓存）\n    async fetchCategories(forceRefresh = false) {\n      const cacheKey = 'categories';\n      if (!forceRefresh && getCachedData(cacheKey)) {\n        this.categories = getCachedData(cacheKey);\n        return this.categories;\n      }\n      this.setLoading(true);\n      this.clearError();\n      try {\n        const categories = await clothingAdapter.fetchCategories();\n        this.categories = categories;\n        setCachedData(cacheKey, categories);\n        return categories;\n      } catch (error) {\n        this.setError('获取衣物类别失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n    async fetchClothingItems(forceRefresh = false) {\n      const cacheKey = 'clothingItems';\n      if (!forceRefresh && getCachedData(cacheKey)) {\n        this.clothingItems = getCachedData(cacheKey);\n        this.pagination.totalItems = this.clothingItems.length;\n        return this.clothingItems;\n      }\n      this.setLoading(true);\n      this.clearError();\n      try {\n        const items = await clothingAdapter.fetchClothingItems();\n        this.clothingItems = items;\n        this.pagination.totalItems = items.length;\n        this.lastFetchTime = new Date();\n        setCachedData(cacheKey, items);\n        return items;\n      } catch (error) {\n        this.setError('获取衣物列表失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n    // 防抖搜索\n    debouncedSearch: debounce(async function (keyword) {\n      if (!keyword.trim()) {\n        this.searchResults = [];\n        this.isSearching = false;\n        return;\n      }\n      this.isSearching = true;\n      try {\n        const results = await clothingAdapter.searchClothingItems(keyword);\n        this.searchResults = results;\n        return results;\n      } catch (error) {\n        this.setError('搜索衣物失败');\n        throw error;\n      } finally {\n        this.isSearching = false;\n      }\n    }, 300),\n    // 优化后的搜索\n    async searchClothingItems(keyword) {\n      return this.debouncedSearch(keyword);\n    },\n    // 批量更新优化\n    async batchUpdate(updates) {\n      const updatePromises = updates.map(async ({\n        id,\n        data\n      }) => {\n        if (this.pendingUpdates.has(id)) {\n          // 合并更新\n          const pending = this.pendingUpdates.get(id);\n          this.pendingUpdates.set(id, {\n            ...pending,\n            ...data\n          });\n          return;\n        }\n        this.pendingUpdates.set(id, data);\n        try {\n          const updatedItem = await clothingAdapter.updateClothingItem(id, data);\n          const index = this.clothingItems.findIndex(item => item.id === id);\n          if (index !== -1) {\n            this.clothingItems[index] = updatedItem;\n          }\n          this.pendingUpdates.delete(id);\n          return updatedItem;\n        } catch (error) {\n          this.pendingUpdates.delete(id);\n          throw error;\n        }\n      });\n      return Promise.all(updatePromises);\n    },\n    // 快速添加（乐观更新）\n    async addClothingItem(item) {\n      // 乐观更新：先添加到本地\n      const tempId = `temp_${Date.now()}`;\n      const optimisticItem = {\n        ...item,\n        id: tempId,\n        isOptimistic: true\n      };\n      this.clothingItems.unshift(optimisticItem);\n      this.pagination.totalItems += 1;\n      try {\n        const newItem = await clothingAdapter.addClothingItem(item);\n\n        // 替换临时项\n        const index = this.clothingItems.findIndex(item => item.id === tempId);\n        if (index !== -1) {\n          this.clothingItems.splice(index, 1, newItem);\n        }\n\n        // 更新缓存\n        setCachedData('clothingItems', this.clothingItems);\n        return newItem;\n      } catch (error) {\n        // 回滚：移除临时项\n        this.clothingItems = this.clothingItems.filter(item => item.id !== tempId);\n        this.pagination.totalItems -= 1;\n        this.setError('添加衣物失败');\n        throw error;\n      }\n    },\n    // 优化后的更新\n    async updateClothingItem(id, updates) {\n      // 立即更新本地状态（乐观更新）\n      const index = this.clothingItems.findIndex(item => item.id === id);\n      if (index !== -1) {\n        const originalItem = {\n          ...this.clothingItems[index]\n        };\n        this.clothingItems[index] = {\n          ...originalItem,\n          ...updates\n        };\n        try {\n          const updatedItem = await clothingAdapter.updateClothingItem(id, updates);\n          this.clothingItems[index] = updatedItem;\n\n          // 更新缓存\n          setCachedData('clothingItems', this.clothingItems);\n          return updatedItem;\n        } catch (error) {\n          // 回滚\n          this.clothingItems[index] = originalItem;\n          this.setError('更新衣物失败');\n          throw error;\n        }\n      }\n    },\n    // 优化后的删除\n    async deleteClothingItem(id) {\n      const index = this.clothingItems.findIndex(item => item.id === id);\n      if (index === -1) return;\n\n      // 保存被删除的项目用于回滚\n      const deletedItem = this.clothingItems[index];\n      this.clothingItems.splice(index, 1);\n      this.pagination.totalItems -= 1;\n      try {\n        await clothingAdapter.deleteClothingItem(id);\n\n        // 更新缓存\n        setCachedData('clothingItems', this.clothingItems);\n        return true;\n      } catch (error) {\n        // 回滚\n        this.clothingItems.splice(index, 0, deletedItem);\n        this.pagination.totalItems += 1;\n        this.setError('删除衣物失败');\n        throw error;\n      }\n    },\n    // 获取衣物详情（带缓存）\n    async fetchClothingItemDetail(id) {\n      const cacheKey = `item_${id}`;\n      if (getCachedData(cacheKey)) {\n        return getCachedData(cacheKey);\n      }\n      this.setLoading(true);\n      this.clearError();\n      try {\n        const item = await clothingAdapter.fetchClothingItemDetail(id);\n        setCachedData(cacheKey, item);\n        return item;\n      } catch (error) {\n        this.setError('获取衣物详情失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n    // 预加载数据\n    async preloadData() {\n      if (!this.lastFetchTime || Date.now() - this.lastFetchTime.getTime() > CACHE_DURATION) {\n        await Promise.all([this.fetchCategories(), this.fetchClothingItems()]);\n      }\n    },\n    // 清理缓存\n    clearCache() {\n      cache.clear();\n      this.lastFetchTime = null;\n    },\n    // 切换收藏状态\n    async toggleFavorite(id) {\n      const index = this.clothingItems.findIndex(item => item.id === id);\n      if (index === -1) return;\n      const currentItem = this.clothingItems[index];\n      const originalFavorite = currentItem.favorite;\n\n      // 乐观更新\n      this.clothingItems[index] = {\n        ...currentItem,\n        favorite: !currentItem.favorite\n      };\n      try {\n        const updatedItem = await clothingAdapter.updateClothingItem(id, {\n          favorite: !currentItem.favorite\n        });\n        this.clothingItems[index] = updatedItem;\n        setCachedData('clothingItems', this.clothingItems);\n        return updatedItem;\n      } catch (error) {\n        // 回滚\n        this.clothingItems[index] = {\n          ...currentItem,\n          favorite: originalFavorite\n        };\n        this.setError('更新收藏状态失败');\n        throw error;\n      }\n    },\n    // 初始化所有数据\n    async initializeClothingStore() {\n      try {\n        await this.preloadData();\n        console.log('衣物商店初始化完成');\n      } catch (error) {\n        console.error('衣物商店初始化失败:', error);\n        this.setError('初始化失败');\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","clothingAdapter","cache","Map","CACHE_DURATION","isCacheValid","key","cached","get","Date","now","timestamp","getCachedData","data","setCachedData","set","debounce","func","delay","timeoutId","args","clearTimeout","Promise","resolve","setTimeout","apply","useClothingStore","state","categories","clothingItems","selectedCategory","loading","error","searchResults","isSearching","lastFetchTime","pendingUpdates","pagination","currentPage","itemsPerPage","totalItems","getters","selectedItems","filter","item","categoryId","favoriteItems","favorite","itemsByCategory","result","forEach","category","id","mostWornItems","sort","a","b","wearCount","slice","recentlyAddedItems","purchaseDate","paginatedItems","startIndex","endIndex","totalPages","Math","ceil","length","stats","total","Set","map","totalValue","reduce","sum","price","averagePrice","actions","setLoading","status","setError","clearError","setPagination","setSelectedCategory","clearSelectedCategory","fetchCategories","forceRefresh","cacheKey","fetchClothingItems","items","debouncedSearch","keyword","trim","results","searchClothingItems","batchUpdate","updates","updatePromises","has","pending","updatedItem","updateClothingItem","index","findIndex","delete","all","addClothingItem","tempId","optimisticItem","isOptimistic","unshift","newItem","splice","originalItem","deleteClothingItem","deletedItem","fetchClothingItemDetail","preloadData","getTime","clearCache","clear","toggleFavorite","currentItem","originalFavorite","initializeClothingStore","console","log"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/stores/clothingStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { clothingAdapter } from '../adapters/clothingAdapter';\n\n// 缓存工具\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\n\nconst isCacheValid = key => {\n  const cached = cache.get(key);\n  if (!cached) return false;\n  return Date.now() - cached.timestamp < CACHE_DURATION;\n};\n\nconst getCachedData = key => {\n  const cached = cache.get(key);\n  return cached && isCacheValid(key) ? cached.data : null;\n};\n\nconst setCachedData = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now(),\n  });\n};\n\n// 防抖工具\nconst debounce = (func, delay) => {\n  let timeoutId;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    return new Promise(resolve => {\n      timeoutId = setTimeout(() => resolve(func.apply(this, args)), delay);\n    });\n  };\n};\n\nexport const useClothingStore = defineStore('clothing', {\n  state: () => ({\n    categories: [],\n    clothingItems: [],\n    selectedCategory: null,\n    loading: false,\n    error: null,\n\n    // 性能优化相关\n    searchResults: [],\n    isSearching: false,\n    lastFetchTime: null,\n\n    // 批量操作队列\n    pendingUpdates: new Map(),\n\n    // 分页相关\n    pagination: {\n      currentPage: 1,\n      itemsPerPage: 50,\n      totalItems: 0,\n    },\n  }),\n\n  getters: {\n    // 获取选中的衣物\n    selectedItems: state => {\n      if (state.selectedCategory) {\n        return state.clothingItems.filter(item => item.categoryId === state.selectedCategory);\n      }\n      return state.clothingItems;\n    },\n\n    // 获取收藏的衣物\n    favoriteItems: state => {\n      return state.clothingItems.filter(item => item.favorite);\n    },\n\n    // 按类别分组衣物\n    itemsByCategory: state => {\n      const result = {};\n      state.categories.forEach(category => {\n        result[category.id] = state.clothingItems.filter(item => item.categoryId === category.id);\n      });\n      return result;\n    },\n\n    // 获取最常穿的衣物\n    mostWornItems: state => {\n      return [...state.clothingItems].sort((a, b) => b.wearCount - a.wearCount).slice(0, 5);\n    },\n\n    // 获取最近添加的衣物\n    recentlyAddedItems: state => {\n      return [...state.clothingItems]\n        .sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate))\n        .slice(0, 5);\n    },\n\n    // 新增性能相关 getters\n    paginatedItems: state => {\n      const startIndex = (state.pagination.currentPage - 1) * state.pagination.itemsPerPage;\n      const endIndex = startIndex + state.pagination.itemsPerPage;\n      return state.clothingItems.slice(startIndex, endIndex);\n    },\n\n    totalPages: state => Math.ceil(state.clothingItems.length / state.pagination.itemsPerPage),\n\n    // 获取统计数据\n    stats: state => ({\n      total: state.clothingItems.length,\n      categories: [...new Set(state.clothingItems.map(item => item.categoryId))].length,\n      totalValue: state.clothingItems.reduce((sum, item) => sum + (item.price || 0), 0),\n      averagePrice: state.clothingItems.length\n        ? state.clothingItems.reduce((sum, item) => sum + (item.price || 0), 0) /\n          state.clothingItems.length\n        : 0,\n    }),\n  },\n\n  actions: {\n    // 设置加载状态\n    setLoading(status) {\n      this.loading = status;\n    },\n\n    setError(error) {\n      this.error = error;\n    },\n\n    clearError() {\n      this.error = null;\n    },\n\n    // 设置分页\n    setPagination(pagination) {\n      this.pagination = { ...this.pagination, ...pagination };\n    },\n\n    // 设置选中的分类\n    setSelectedCategory(categoryId) {\n      this.selectedCategory = categoryId;\n    },\n\n    // 清除选中的分类\n    clearSelectedCategory() {\n      this.selectedCategory = null;\n    },\n\n    // 智能获取数据（带缓存）\n    async fetchCategories(forceRefresh = false) {\n      const cacheKey = 'categories';\n\n      if (!forceRefresh && getCachedData(cacheKey)) {\n        this.categories = getCachedData(cacheKey);\n        return this.categories;\n      }\n\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        const categories = await clothingAdapter.fetchCategories();\n        this.categories = categories;\n        setCachedData(cacheKey, categories);\n        return categories;\n      } catch (error) {\n        this.setError('获取衣物类别失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n\n    async fetchClothingItems(forceRefresh = false) {\n      const cacheKey = 'clothingItems';\n\n      if (!forceRefresh && getCachedData(cacheKey)) {\n        this.clothingItems = getCachedData(cacheKey);\n        this.pagination.totalItems = this.clothingItems.length;\n        return this.clothingItems;\n      }\n\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        const items = await clothingAdapter.fetchClothingItems();\n        this.clothingItems = items;\n        this.pagination.totalItems = items.length;\n        this.lastFetchTime = new Date();\n        setCachedData(cacheKey, items);\n        return items;\n      } catch (error) {\n        this.setError('获取衣物列表失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n\n    // 防抖搜索\n    debouncedSearch: debounce(async function (keyword) {\n      if (!keyword.trim()) {\n        this.searchResults = [];\n        this.isSearching = false;\n        return;\n      }\n\n      this.isSearching = true;\n      try {\n        const results = await clothingAdapter.searchClothingItems(keyword);\n        this.searchResults = results;\n        return results;\n      } catch (error) {\n        this.setError('搜索衣物失败');\n        throw error;\n      } finally {\n        this.isSearching = false;\n      }\n    }, 300),\n\n    // 优化后的搜索\n    async searchClothingItems(keyword) {\n      return this.debouncedSearch(keyword);\n    },\n\n    // 批量更新优化\n    async batchUpdate(updates) {\n      const updatePromises = updates.map(async ({ id, data }) => {\n        if (this.pendingUpdates.has(id)) {\n          // 合并更新\n          const pending = this.pendingUpdates.get(id);\n          this.pendingUpdates.set(id, { ...pending, ...data });\n          return;\n        }\n\n        this.pendingUpdates.set(id, data);\n\n        try {\n          const updatedItem = await clothingAdapter.updateClothingItem(id, data);\n          const index = this.clothingItems.findIndex(item => item.id === id);\n          if (index !== -1) {\n            this.clothingItems[index] = updatedItem;\n          }\n          this.pendingUpdates.delete(id);\n          return updatedItem;\n        } catch (error) {\n          this.pendingUpdates.delete(id);\n          throw error;\n        }\n      });\n\n      return Promise.all(updatePromises);\n    },\n\n    // 快速添加（乐观更新）\n    async addClothingItem(item) {\n      // 乐观更新：先添加到本地\n      const tempId = `temp_${Date.now()}`;\n      const optimisticItem = { ...item, id: tempId, isOptimistic: true };\n\n      this.clothingItems.unshift(optimisticItem);\n      this.pagination.totalItems += 1;\n\n      try {\n        const newItem = await clothingAdapter.addClothingItem(item);\n\n        // 替换临时项\n        const index = this.clothingItems.findIndex(item => item.id === tempId);\n        if (index !== -1) {\n          this.clothingItems.splice(index, 1, newItem);\n        }\n\n        // 更新缓存\n        setCachedData('clothingItems', this.clothingItems);\n\n        return newItem;\n      } catch (error) {\n        // 回滚：移除临时项\n        this.clothingItems = this.clothingItems.filter(item => item.id !== tempId);\n        this.pagination.totalItems -= 1;\n\n        this.setError('添加衣物失败');\n        throw error;\n      }\n    },\n\n    // 优化后的更新\n    async updateClothingItem(id, updates) {\n      // 立即更新本地状态（乐观更新）\n      const index = this.clothingItems.findIndex(item => item.id === id);\n      if (index !== -1) {\n        const originalItem = { ...this.clothingItems[index] };\n        this.clothingItems[index] = { ...originalItem, ...updates };\n\n        try {\n          const updatedItem = await clothingAdapter.updateClothingItem(id, updates);\n          this.clothingItems[index] = updatedItem;\n\n          // 更新缓存\n          setCachedData('clothingItems', this.clothingItems);\n\n          return updatedItem;\n        } catch (error) {\n          // 回滚\n          this.clothingItems[index] = originalItem;\n          this.setError('更新衣物失败');\n          throw error;\n        }\n      }\n    },\n\n    // 优化后的删除\n    async deleteClothingItem(id) {\n      const index = this.clothingItems.findIndex(item => item.id === id);\n      if (index === -1) return;\n\n      // 保存被删除的项目用于回滚\n      const deletedItem = this.clothingItems[index];\n      this.clothingItems.splice(index, 1);\n      this.pagination.totalItems -= 1;\n\n      try {\n        await clothingAdapter.deleteClothingItem(id);\n\n        // 更新缓存\n        setCachedData('clothingItems', this.clothingItems);\n\n        return true;\n      } catch (error) {\n        // 回滚\n        this.clothingItems.splice(index, 0, deletedItem);\n        this.pagination.totalItems += 1;\n\n        this.setError('删除衣物失败');\n        throw error;\n      }\n    },\n\n    // 获取衣物详情（带缓存）\n    async fetchClothingItemDetail(id) {\n      const cacheKey = `item_${id}`;\n\n      if (getCachedData(cacheKey)) {\n        return getCachedData(cacheKey);\n      }\n\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        const item = await clothingAdapter.fetchClothingItemDetail(id);\n        setCachedData(cacheKey, item);\n        return item;\n      } catch (error) {\n        this.setError('获取衣物详情失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n\n    // 预加载数据\n    async preloadData() {\n      if (!this.lastFetchTime || Date.now() - this.lastFetchTime.getTime() > CACHE_DURATION) {\n        await Promise.all([this.fetchCategories(), this.fetchClothingItems()]);\n      }\n    },\n\n    // 清理缓存\n    clearCache() {\n      cache.clear();\n      this.lastFetchTime = null;\n    },\n\n    // 切换收藏状态\n    async toggleFavorite(id) {\n      const index = this.clothingItems.findIndex(item => item.id === id);\n      if (index === -1) return;\n\n      const currentItem = this.clothingItems[index];\n      const originalFavorite = currentItem.favorite;\n\n      // 乐观更新\n      this.clothingItems[index] = {\n        ...currentItem,\n        favorite: !currentItem.favorite,\n      };\n\n      try {\n        const updatedItem = await clothingAdapter.updateClothingItem(id, {\n          favorite: !currentItem.favorite,\n        });\n\n        this.clothingItems[index] = updatedItem;\n        setCachedData('clothingItems', this.clothingItems);\n        return updatedItem;\n      } catch (error) {\n        // 回滚\n        this.clothingItems[index] = {\n          ...currentItem,\n          favorite: originalFavorite,\n        };\n        this.setError('更新收藏状态失败');\n        throw error;\n      }\n    },\n\n    // 初始化所有数据\n    async initializeClothingStore() {\n      try {\n        await this.preloadData();\n        console.log('衣物商店初始化完成');\n      } catch (error) {\n        console.error('衣物商店初始化失败:', error);\n        this.setError('初始化失败');\n      }\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}