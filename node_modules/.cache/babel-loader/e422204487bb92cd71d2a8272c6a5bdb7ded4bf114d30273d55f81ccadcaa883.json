{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nvar apiClient = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napiClient.interceptors.request.use(function (config) {\n  // 添加token等认证信息\n  var token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napiClient.interceptors.response.use(function (response) {\n  // 统一处理响应数据\n  return response.data;\n}, function (error) {\n  // 统一处理错误\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 处理未授权\n        console.error('未授权访问，请登录');\n        break;\n      case 404:\n        // 处理未找到\n        console.error('请求的资源不存在');\n        break;\n      case 500:\n        // 处理服务器错误\n        console.error('服务器错误，请稍后再试');\n        break;\n      default:\n        // 处理其他错误\n        console.error(\"\\u8BF7\\u6C42\\u9519\\u8BEF: \".concat(error.response.status));\n    }\n  } else {\n    // 处理网络错误等\n    console.error('网络错误，请检查您的网络连接');\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","data","status","console"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/services/api/index.js"],"sourcesContent":["import axios from 'axios'\n\n// 创建axios实例\nconst apiClient = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\napiClient.interceptors.request.use(\n  config => {\n    // 添加token等认证信息\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\napiClient.interceptors.response.use(\n  response => {\n    // 统一处理响应数据\n    return response.data\n  },\n  error => {\n    // 统一处理错误\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          // 处理未授权\n          console.error('未授权访问，请登录')\n          break\n        case 404:\n          // 处理未找到\n          console.error('请求的资源不存在')\n          break\n        case 500:\n          // 处理服务器错误\n          console.error('服务器错误，请稍后再试')\n          break\n        default:\n          // 处理其他错误\n          console.error(`请求错误: ${error.response.status}`)\n      }\n    } else {\n      // 处理网络错误等\n      console.error('网络错误，请检查您的网络连接')\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default apiClient\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,IAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,MAAM;EACnDC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,SAAS,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAChC,UAAAC,MAAM,EAAI;EACR;EACA,IAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,aAAAC,MAAA,CAAaJ,KAAK,CAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACD,UAAAM,KAAK,EAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAjB,SAAS,CAACQ,YAAY,CAACY,QAAQ,CAACV,GAAG,CACjC,UAAAU,QAAQ,EAAI;EACV;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACD,UAAAJ,KAAK,EAAI;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,QAAQH,KAAK,CAACG,QAAQ,CAACE,MAAM;MAC3B,KAAK,GAAG;QACN;QACAC,OAAO,CAACN,KAAK,CAAC,WAAW,CAAC;QAC1B;MACF,KAAK,GAAG;QACN;QACAM,OAAO,CAACN,KAAK,CAAC,UAAU,CAAC;QACzB;MACF,KAAK,GAAG;QACN;QACAM,OAAO,CAACN,KAAK,CAAC,aAAa,CAAC;QAC5B;MACF;QACE;QACAM,OAAO,CAACN,KAAK,8BAAAD,MAAA,CAAUC,KAAK,CAACG,QAAQ,CAACE,MAAM,CAAE,CAAC;IACnD;EACF,CAAC,MAAM;IACL;IACAC,OAAO,CAACN,KAAK,CAAC,gBAAgB,CAAC;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAejB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}