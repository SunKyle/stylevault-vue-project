{"ast":null,"code":"import { defineStore } from 'pinia';\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    user: null,\n    preferences: {\n      temperatureUnit: 'celsius',\n      // 'celsius' 或 'fahrenheit'\n      colorScheme: 'light',\n      // 'light'、'dark' 或 'auto'\n      defaultView: 'grid',\n      // 'grid' 或 'list'\n      notifications: {\n        weatherAlerts: true,\n        outfitRecommendations: true,\n        laundryReminders: true\n      }\n    },\n    loading: false,\n    error: null\n  }),\n  getters: {\n    // 检查用户是否已登录\n    isLoggedIn: state => !!state.user,\n    // 获取温度单位\n    temperatureUnit: state => state.preferences.temperatureUnit,\n    // 获取颜色主题\n    colorScheme: state => state.preferences.colorScheme,\n    // 获取默认视图\n    defaultView: state => state.preferences.defaultView,\n    // 获取通知设置\n    notificationSettings: state => state.preferences.notifications,\n    // 获取用户ID\n    userId: state => state.user ? state.user.id : null,\n    // 获取用户名\n    userName: state => state.user ? state.user.name : '游客'\n  },\n  actions: {\n    // 设置加载状态\n    setLoading(status) {\n      this.loading = status;\n    },\n    // 设置错误信息\n    setError(error) {\n      this.error = error;\n    },\n    // 清除错误信息\n    clearError() {\n      this.error = null;\n    },\n    // 登录\n    async login(credentials) {\n      this.setLoading(true);\n      this.clearError();\n      try {\n        // 这里应该调用实际的登录API\n        // const response = await authService.login(credentials)\n        // this.user = response.user\n\n        // 模拟登录成功\n        this.user = {\n          id: 'user123',\n          name: '时尚达人',\n          email: credentials.email,\n          avatar: 'https://picsum.photos/seed/avatar/100/100',\n          preferences: this.preferences\n        };\n        return this.user;\n      } catch (error) {\n        this.setError('登录失败，请检查您的用户名和密码');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n    // 注册\n    async register(userData) {\n      this.setLoading(true);\n      this.clearError();\n      try {\n        // 这里应该调用实际的注册API\n        // const response = await authService.register(userData)\n        // this.user = response.user\n\n        // 模拟注册成功\n        this.user = {\n          id: 'user' + Date.now(),\n          name: userData.name,\n          email: userData.email,\n          avatar: 'https://picsum.photos/seed/avatar' + Date.now() + '/100/100',\n          preferences: this.preferences\n        };\n        return this.user;\n      } catch (error) {\n        this.setError('注册失败，请稍后重试');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n    // 登出\n    logout() {\n      this.user = null;\n      // 这里可以添加其他登出逻辑，如清除token等\n    },\n    // 更新用户信息\n    async updateUserProfile(updates) {\n      this.setLoading(true);\n      this.clearError();\n      try {\n        // 这里应该调用实际的更新API\n        // const response = await authService.updateProfile(this.user.id, updates)\n        // this.user = { ...this.user, ...updates }\n\n        // 模拟更新成功\n        this.user = {\n          ...this.user,\n          ...updates\n        };\n        return this.user;\n      } catch (error) {\n        this.setError('更新用户信息失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n    // 更新偏好设置\n    updatePreferences(newPreferences) {\n      this.preferences = {\n        ...this.preferences,\n        ...newPreferences\n      };\n\n      // 如果用户已登录，同时更新用户信息中的偏好设置\n      if (this.user) {\n        this.user.preferences = this.preferences;\n      }\n\n      // 这里可以添加API调用来更新后端数据\n      // await authService.updatePreferences(this.preferences)\n    },\n    // 更新通知设置\n    updateNotificationSettings(newSettings) {\n      this.preferences.notifications = {\n        ...this.preferences.notifications,\n        ...newSettings\n      };\n\n      // 如果用户已登录，同时更新用户信息中的通知设置\n      if (this.user) {\n        this.user.preferences.notifications = this.preferences.notifications;\n      }\n\n      // 这里可以添加API调用来更新后端数据\n      // await authService.updateNotificationSettings(this.preferences.notifications)\n    },\n    // 切换温度单位\n    toggleTemperatureUnit() {\n      const newUnit = this.preferences.temperatureUnit === 'celsius' ? 'fahrenheit' : 'celsius';\n      this.updatePreferences({\n        temperatureUnit: newUnit\n      });\n    },\n    // 切换颜色主题\n    toggleColorScheme() {\n      let newScheme;\n      switch (this.preferences.colorScheme) {\n        case 'light':\n          newScheme = 'dark';\n          break;\n        case 'dark':\n          newScheme = 'auto';\n          break;\n        case 'auto':\n          newScheme = 'light';\n          break;\n        default:\n          newScheme = 'light';\n      }\n      this.updatePreferences({\n        colorScheme: newScheme\n      });\n    },\n    // 切换默认视图\n    toggleDefaultView() {\n      const newView = this.preferences.defaultView === 'grid' ? 'list' : 'grid';\n      this.updatePreferences({\n        defaultView: newView\n      });\n    },\n    // 切换特定通知设置\n    toggleNotificationSetting(settingName) {\n      if (settingName in this.preferences.notifications) {\n        const newSettings = {\n          ...this.preferences.notifications,\n          [settingName]: !this.preferences.notifications[settingName]\n        };\n        this.updateNotificationSettings(newSettings);\n      }\n    },\n    // 初始化用户数据（例如从本地存储或API）\n    async initializeUser() {\n      this.setLoading(true);\n      this.clearError();\n      try {\n        // 这里可以添加从本地存储或API获取用户数据的逻辑\n        // 例如检查本地存储中的token，并获取用户信息\n\n        // 模拟从本地存储获取用户偏好\n        const savedPreferences = localStorage.getItem('userPreferences');\n        if (savedPreferences) {\n          try {\n            const parsedPreferences = JSON.parse(savedPreferences);\n            this.updatePreferences(parsedPreferences);\n          } catch (e) {\n            console.error('解析用户偏好设置失败:', e);\n          }\n        }\n        return this.user;\n      } catch (error) {\n        this.setError('初始化用户数据失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useUserStore","state","user","preferences","temperatureUnit","colorScheme","defaultView","notifications","weatherAlerts","outfitRecommendations","laundryReminders","loading","error","getters","isLoggedIn","notificationSettings","userId","id","userName","name","actions","setLoading","status","setError","clearError","login","credentials","email","avatar","register","userData","Date","now","logout","updateUserProfile","updates","updatePreferences","newPreferences","updateNotificationSettings","newSettings","toggleTemperatureUnit","newUnit","toggleColorScheme","newScheme","toggleDefaultView","newView","toggleNotificationSetting","settingName","initializeUser","savedPreferences","localStorage","getItem","parsedPreferences","JSON","parse","e","console"],"sources":["/Users/sunxiaokai/Desktop/stylevault-vue-project/src/stores/userStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    user: null,\n    preferences: {\n      temperatureUnit: 'celsius', // 'celsius' 或 'fahrenheit'\n      colorScheme: 'light', // 'light'、'dark' 或 'auto'\n      defaultView: 'grid', // 'grid' 或 'list'\n      notifications: {\n        weatherAlerts: true,\n        outfitRecommendations: true,\n        laundryReminders: true,\n      },\n    },\n    loading: false,\n    error: null,\n  }),\n\n  getters: {\n    // 检查用户是否已登录\n    isLoggedIn: state => !!state.user,\n\n    // 获取温度单位\n    temperatureUnit: state => state.preferences.temperatureUnit,\n\n    // 获取颜色主题\n    colorScheme: state => state.preferences.colorScheme,\n\n    // 获取默认视图\n    defaultView: state => state.preferences.defaultView,\n\n    // 获取通知设置\n    notificationSettings: state => state.preferences.notifications,\n\n    // 获取用户ID\n    userId: state => (state.user ? state.user.id : null),\n\n    // 获取用户名\n    userName: state => (state.user ? state.user.name : '游客'),\n  },\n\n  actions: {\n    // 设置加载状态\n    setLoading(status) {\n      this.loading = status;\n    },\n\n    // 设置错误信息\n    setError(error) {\n      this.error = error;\n    },\n\n    // 清除错误信息\n    clearError() {\n      this.error = null;\n    },\n\n    // 登录\n    async login(credentials) {\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        // 这里应该调用实际的登录API\n        // const response = await authService.login(credentials)\n        // this.user = response.user\n\n        // 模拟登录成功\n        this.user = {\n          id: 'user123',\n          name: '时尚达人',\n          email: credentials.email,\n          avatar: 'https://picsum.photos/seed/avatar/100/100',\n          preferences: this.preferences,\n        };\n\n        return this.user;\n      } catch (error) {\n        this.setError('登录失败，请检查您的用户名和密码');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n\n    // 注册\n    async register(userData) {\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        // 这里应该调用实际的注册API\n        // const response = await authService.register(userData)\n        // this.user = response.user\n\n        // 模拟注册成功\n        this.user = {\n          id: 'user' + Date.now(),\n          name: userData.name,\n          email: userData.email,\n          avatar: 'https://picsum.photos/seed/avatar' + Date.now() + '/100/100',\n          preferences: this.preferences,\n        };\n\n        return this.user;\n      } catch (error) {\n        this.setError('注册失败，请稍后重试');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n\n    // 登出\n    logout() {\n      this.user = null;\n      // 这里可以添加其他登出逻辑，如清除token等\n    },\n\n    // 更新用户信息\n    async updateUserProfile(updates) {\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        // 这里应该调用实际的更新API\n        // const response = await authService.updateProfile(this.user.id, updates)\n        // this.user = { ...this.user, ...updates }\n\n        // 模拟更新成功\n        this.user = { ...this.user, ...updates };\n\n        return this.user;\n      } catch (error) {\n        this.setError('更新用户信息失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n\n    // 更新偏好设置\n    updatePreferences(newPreferences) {\n      this.preferences = { ...this.preferences, ...newPreferences };\n\n      // 如果用户已登录，同时更新用户信息中的偏好设置\n      if (this.user) {\n        this.user.preferences = this.preferences;\n      }\n\n      // 这里可以添加API调用来更新后端数据\n      // await authService.updatePreferences(this.preferences)\n    },\n\n    // 更新通知设置\n    updateNotificationSettings(newSettings) {\n      this.preferences.notifications = { ...this.preferences.notifications, ...newSettings };\n\n      // 如果用户已登录，同时更新用户信息中的通知设置\n      if (this.user) {\n        this.user.preferences.notifications = this.preferences.notifications;\n      }\n\n      // 这里可以添加API调用来更新后端数据\n      // await authService.updateNotificationSettings(this.preferences.notifications)\n    },\n\n    // 切换温度单位\n    toggleTemperatureUnit() {\n      const newUnit = this.preferences.temperatureUnit === 'celsius' ? 'fahrenheit' : 'celsius';\n      this.updatePreferences({ temperatureUnit: newUnit });\n    },\n\n    // 切换颜色主题\n    toggleColorScheme() {\n      let newScheme;\n      switch (this.preferences.colorScheme) {\n        case 'light':\n          newScheme = 'dark';\n          break;\n        case 'dark':\n          newScheme = 'auto';\n          break;\n        case 'auto':\n          newScheme = 'light';\n          break;\n        default:\n          newScheme = 'light';\n      }\n      this.updatePreferences({ colorScheme: newScheme });\n    },\n\n    // 切换默认视图\n    toggleDefaultView() {\n      const newView = this.preferences.defaultView === 'grid' ? 'list' : 'grid';\n      this.updatePreferences({ defaultView: newView });\n    },\n\n    // 切换特定通知设置\n    toggleNotificationSetting(settingName) {\n      if (settingName in this.preferences.notifications) {\n        const newSettings = {\n          ...this.preferences.notifications,\n          [settingName]: !this.preferences.notifications[settingName],\n        };\n        this.updateNotificationSettings(newSettings);\n      }\n    },\n\n    // 初始化用户数据（例如从本地存储或API）\n    async initializeUser() {\n      this.setLoading(true);\n      this.clearError();\n\n      try {\n        // 这里可以添加从本地存储或API获取用户数据的逻辑\n        // 例如检查本地存储中的token，并获取用户信息\n\n        // 模拟从本地存储获取用户偏好\n        const savedPreferences = localStorage.getItem('userPreferences');\n        if (savedPreferences) {\n          try {\n            const parsedPreferences = JSON.parse(savedPreferences);\n            this.updatePreferences(parsedPreferences);\n          } catch (e) {\n            console.error('解析用户偏好设置失败:', e);\n          }\n        }\n\n        return this.user;\n      } catch (error) {\n        this.setError('初始化用户数据失败');\n        throw error;\n      } finally {\n        this.setLoading(false);\n      }\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}